-- Carregar a biblioteca necessária
local Lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/7yhx/kwargs_Ui_Library/main/source.lua"))()

-- Criar a UI com um tema e tamanho especificados
local UI = Lib:Create{
   Theme = "Dark", -- Você pode usar qualquer outro tema
   Size = UDim2.new(0, 555, 0, 400) -- Tamanho padrão
}

-- Criar uma aba principal
local Main = UI:Tab{
   Name = "Main"
}

-- Criar divisores na aba principal
local Divider = Main:Divider{
   Name = "Main Features"
}

local QuitDivider = Main:Divider{
   Name = "Quit"
}

-- Adicionar um botão com uma função de callback
local KillAll = Divider:Button{
   Name = "Dodge",
   Description = "Kills all the players in the game!",
   Callback = function()
       local Enabled = true

       -- Configurações
       local COUNTER_MODE = false -- NÃO RECOMENDADO
       local Legit = {
           Enabled = true,
           LightChance = 0.3,
           HeavyChance = 0.75,
       }
       
       local Client = game.Players.LocalPlayer
       local States = workspace.States
       local Effect = require(game:GetService("ReplicatedStorage").Modules.EffectHelper)

       -- Funções auxiliares
       local function get(n, s)
           return States[n.Name]:FindFirstChild(s, true).Value
       end

       local function get_root(chr)
           return chr.HumanoidRootPart
       end

       local function attack(char)
           game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer({{"02010000", char}, "\20"})
       end

       local function dashToBehind(target, _direction)
           local targetCfr = get_root(target).CFrame
           local targetPos = (targetCfr * CFrame.new(0, 0, -1)).p
           local myCFrame = Client.Character.HumanoidRootPart.CFrame
           local direction = myCFrame.p - targetCfr.p
           local right = targetCfr.RightVector
           game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer({{direction, _direction}, "\21"})
       end

       local function random()
           return math.random(1, 100) / 100
       end

       -- Gerenciamento de fila
       local waiting = {}

       local function waitValid(name, func)
           if not waiting[name] then waiting[name] = {} end
           table.insert(waiting[name], func)
           warn("Added Queue :", name)
       end

       local function valid(name, ...)
           for i = 1, #waiting[name] do
               task.spawn(waiting[name][i], ...)
           end
           waiting[name] = nil
           warn("Cleared Queue :", name)
       end

       shared.BaseEffectFunction = shared.BaseEffectFunction or {}

       for i, v in pairs(Effect) do
           shared.BaseEffectFunction[i] = shared.BaseEffectFunction[i] or v
           Effect[i] = function(d, ...)
               task.spawn(function()
                   if not Enabled then return end
                   if type(d) == "table" and typeof(d[2]) == "Instance" then
                       local Target = get(Client, "LockedOn")
                       local Distance = Client:DistanceFromCharacter(get_root(d[2]).Position)
                       if Distance > 10 then return end
                       if d[1] == "AttackTrail" and d[2] ~= Client.Character then
                           if Legit.Enabled and d[5] < 0.15 then return end
                           waitValid(d[2].Name, function(LightAttack)
                               if Legit.Enabled then
                                   if LightAttack and random() > Legit.LightChance or random() > Legit.HeavyChance then
                                       return
                                   end
                                   if get(Client, "Punching") then return end
                               end
                               if COUNTER_MODE then
                                   attack(d[2])
                               else
                                   local delay = d[5] * .75
                                   task.wait(delay)
                                   dashToBehind(d[2], "Right")
                               end
                           end)
                       end
                       if d[1] == "StartupHighlight" then
                           valid(d[2].Name, not (d[3] or d[4] or d[5]))
                       end
                   end
               end)
               return shared.BaseEffectFunction[i](d, ...)
           end
       end

       -- Suspender o movimento do mouse ao pressionar o botão do meio
       UserInputService = game:GetService("UserInputService")
       UserInputService.InputBegan:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton3 then
               Client.Character.HumanoidRootPart.Anchored = true
           end
       end)

       UserInputService.InputEnded:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton3 then
               Client.Character.HumanoidRootPart.Anchored = false
           end
       end)
   end
}

-- Adicionar um botão para fechar o script ao clicar em "Quit"
local QuitButton = QuitDivider:Button{
   Name = "Quit",
   Description = "Fecha o script",
   Callback = function()
       -- Fechar o script
       game:Shutdown() -- Função para fechar o script
   end
}
